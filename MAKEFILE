# Go parameters
GOCMD=go
GOTEST=$(GOCMD) test
GOGET=$(GOCMD) get
GOMOD=$(GOCMD) mod
BINARY_NAME=monitor-api

# Test parameters
TEST_TIMEOUT=30s
COVERAGE_FILE=coverage.out
COVERAGE_HTML=coverage.html

# Colors for output
RED=\033[0;31m
GREEN=\033[0;32m
YELLOW=\033[0;33m
NC=\033[0m

.PHONY: deps
deps: ## Download dependencies
	@echo "$(YELLOW)Downloading dependencies...$(NC)"
	$(GOMOD) download
	$(GOMOD) tidy

.PHONY: test-deps
test-deps: ## Install test dependencies
	@echo "$(YELLOW)Installing test dependencies...$(NC)"
	$(GOGET) -u github.com/stretchr/testify
	$(GOGET) -u github.com/vektra/mockery/v2/...
	$(GOGET) -u github.com/DATA-DOG/go-sqlmock

.PHONY: test
test: ## Run all tests
	@echo "$(YELLOW)Running all tests...$(NC)"
	$(GOTEST) -v -timeout $(TEST_TIMEOUT) ./...

.PHONY: test-coverage
test-coverage: ## Run tests with coverage
	@echo "$(YELLOW)Running tests with coverage...$(NC)"
	$(GOTEST) -v -race -coverprofile=$(COVERAGE_FILE) -covermode=atomic -timeout $(TEST_TIMEOUT) ./...
	@echo "$(GREEN)Coverage report generated: $(COVERAGE_FILE)$(NC)"

.PHONY: test-coverage-html
test-coverage-html: test-coverage ## Generate HTML coverage report
	@echo "$(YELLOW)Generating HTML coverage report...$(NC)"
	$(GOCMD) tool cover -html=$(COVERAGE_FILE) -o $(COVERAGE_HTML)
	@echo "$(GREEN)HTML coverage report generated: $(COVERAGE_HTML)$(NC)"

.PHONY: test-verbose
test-verbose: ## Run tests with verbose output
	@echo "$(YELLOW)Running tests with verbose output...$(NC)"
	$(GOTEST) -v -count=1 -timeout $(TEST_TIMEOUT) ./...

.PHONY: test-services
test-services: ## Run service layer tests
	@echo "$(YELLOW)Running service tests...$(NC)"
	$(GOTEST) -v -timeout $(TEST_TIMEOUT) ./internal/services/...